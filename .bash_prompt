if test -f /etc/profile.d/git-sdk.sh
then
	TITLEPREFIX=SDK-${MSYSTEM#MINGW}
else
	TITLEPREFIX=$MSYSTEM
fi

BLUE="\[\033[1;34m\]"
COLOR_NONE="\[\e[0m\]"

if tput setaf 1 &> /dev/null; then
	tput sgr0; # reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);
	# Solarized colors, taken from http://git.io/solarized-colors.
	black=$(tput setaf 0);
	blue=$(tput setaf 153);
	green=$(tput setaf 71);
	orange=$(tput setaf 166);
	red=$(tput setaf 167);
	white=$(tput setaf 15);
	yellow=$(tput setaf 228);
else
	bold='';
	reset="\e[0m";
	black="\e[1;30m";
	blue="\e[1;34m";
	green="\e[1;32m";
	orange="\e[1;33m";
	red="\e[1;31m";
	white="\e[1;37m";
	yellow="\e[1;33m";
fi;

PROMPT_COMMAND=__prompt_command

__prompt_command() {
        # TODO: Add a better versions of the error code and git status using
        # the following website:
        # https://ezprompt.net/

	# Get the exit status of the previous command, 
	# otherwise it will get overriden
	EXIT_STATUS=$?
	if test -f ~/.config/git/git-prompt.sh
	then
		. ~/.config/git/git-prompt.sh
	else
		# Determine active Python virtualenv details.
		if test -z "$VIRTUAL_ENV"
		then
			PYTHON_VIRTUALENV=""
		else
			PYTHON_VIRTUALENV="${BLUE}[`basename \"$VIRTUAL_ENV\"`]${COLOR_NONE} "
		fi
		PS1='\[\033]0;$TITLEPREFIX:$PWD\007\]' # set window title
		PS1="$PS1"'\n'                 # new line
		# PS1="$PS1"'\[\033[32m\]'       # change to green
		# PS1="$PS1"'\u@\h '             # user@host<space>
		# PS1="$PS1"'\[\033[35m\]'       # change to purple
		# PS1="$PS1"'$MSYSTEM '          # show MSYSTEM
		# Append to PS1 string
		PS1="$PS1$BLUE"				   # change to blue
		PS1="$PS1$PYTHON_VIRTUALENV"   # show Python virtual env
		PS1="$PS1"'\[\033[34m\]'       # change to deep blue
		PS1="$PS1"'\w'                 # current working directory
		if test -z "$WINELOADERNOEXEC"
		then
			GIT_EXEC_PATH="$(git --exec-path 2>/dev/null)"
			COMPLETION_PATH="${GIT_EXEC_PATH%/libexec/git-core}"
			COMPLETION_PATH="${COMPLETION_PATH%/lib/git-core}"
			COMPLETION_PATH="$COMPLETION_PATH/share/git/completion"
                        BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
                        if [ ! "${BRANCH}" == "" ]
			then
				. "$COMPLETION_PATH/git-completion.bash"
				. "$COMPLETION_PATH/git-prompt.sh"
				PS1="$PS1"'\[${green}\]'  # change color to cyan
                                STAT=`parse_git_dirty`
                                PS1="${PS1} ${BRANCH}"'\[${orange}\]'
                                PS1="${PS1}${STAT}"
			fi
		fi
		# Change the prompt colour depending on the exit status
		PS1="$PS1""$([ $EXIT_STATUS -eq 0 ] && echo '\[${green}\]' || echo '\[${red}\]')"
		PS1="$PS1"'\n'                 # new line
		PS1="$PS1"'> '                 # prompt: always >
		PS1="$PS1"'\[${white}\]'        # change color
	fi
}

MSYS2_PS1="$PS1"               # for detection by MSYS2 SDK's bash.basrc

# Evaluate all user-specific Bash completion scripts (if any)
if test -z "$WINELOADERNOEXEC"
then
	for c in "$HOME"/bash_completion.d/*.bash
	do
		# Handle absence of any scripts (or the folder) gracefully
		test ! -f "$c" ||
		. "$c"
	done
fi

# Taken from: https://ezprompt.net
function nonzero_return() {
	RETVAL=$?
	[ $RETVAL -ne 0 ] && echo "$RETVAL"
}

# get current branch in git repo (not currently using this)
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
                BRANCH_AND_STAT=" ["
                BRANCH_AND_STAT="${BRANCH_AND_STAT}${BRANCH}"'\[${orange}\]'
                BRANCH_AND_STAT="${BRANCH_AND_STAT}${STAT}"'\[${green}\]'
                BRANCH_AND_STAT="${BRANCH_AND_STAT}]"
		echo "$BRANCH_AND_STAT"
	else
		echo ""
	fi
}

# get current status of git repo
function parse_git_dirty {
	status=`git status 2>&1 | tee`
	dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo ""
	fi
}
